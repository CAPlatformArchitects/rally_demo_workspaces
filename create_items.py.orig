
import sys
import datetime
import psycopg2
import json
import openpyxl
import collections
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.compat import range
from openpyxl.utils import get_column_letter
from pprint import pprint
from pyral import Rally, rallyWorkset
import copy


## Since we are creating all the objects, perhaps if we log them it will be faster.  The information will be cached and we won't need to make additional queries
## This will save on server performance and make the script faster
## TODO: Convert all the lookups to use the cached information
## TODO: Adjust the command line so the environment can be passed
## TODO: Import the data again, this time using an order field, then order the query
## TODO: 
story_project_ref = {}
story_ref = {}
testcase_ref = {}
defect_project_ref = {}
defect_ref = {}
portfolio_item_ref = {}
options = [arg for arg in sys.argv[1:] if arg.startswith('--')]
args = [arg for arg in sys.argv[1:] if arg not in options]

server, user, password, apikey, workspace, project = rallyWorkset(options)
rally = Rally('rally1.rallydev.com', 'thomas.mcquitty@acme.com', 'Kanban!!', workspace='TJM-Test', project='Online Store')
rally.enableLogging('output.log')

proj = rally.getProject()
user_names = {}
project_names = {}
debug = 0

# get the first instance of a user
## Get's a user ref for Rally
## First time, it will query the system and add it to the dictionary
## Subsequent calls will have cached user information, speeding up the system
def getUserRef(user_name):
    global rally
    global user_names

    if debug:
        print(user_names.items())
    
    if user_name in user_names:
        if debug:
            print("Found %s" % user_name)
        value = user_names[user_name]
    else:
        if debug:
            print("Adding name %s " %user_name)
        value = rally.getUserInfo(username=user_name).pop(0).ref
        user_names[user_name] = value
        
    return value

## Get's a project ref for Rally
## First time, it will query the system and add it to the dictionary
## Subsequent calls will have cached information, speeding up the system
def getProjectRef(project_name):
    global rally
    global project_names
    
    if debug:
        print("Items:\n")
        print(project_names.items())
    
    if project_name in project_names:
        if debug:
            print("Found %s" % project_name)
        value = project_names[project_name]
    else:
        if debug:
            print("Adding name %s " %project_name)
        try:
		value = rally.getProject(project_name).ref
        	project_names[project_name] = value
	except Exception, details:
	        sys.stderr.write("ERROR: %s \n" % details)
       		sys.exit(1)
		
    return value

def getIterationRef(piName):
    global rally

    if debug:
        print "Getting Iteration" 

    collection = rally.get('Iteration')
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if debug:
                    print pe.Name
                if(name == piName):
                    print pe.oid, pe.Name
                    return pe.oid

def getPortfolioItemThemeRef(piName):
    global rally
    debug = 1
    if debug:
        print "Getting Theme Ref" 

    collection = rally.getCollection("https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/theme?")
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
		print name
                if(name == piName):
		    if debug:
			    print "found portfolio item" + name
                    print pe.oid, pe.Name
                    return pe.oid

def getPortfolioItemInitiativeRef(piName):
    global rally
 
    if debug:
        print "Getting Initiative Ref"

    collection = rally.getCollection("https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/initiative?")
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if(name == piName):
                    print pe.oid, pe.Name
                    return pe.oid

def getPortfolioItemThemeRef(piName):
    global rally
 
    if debug:
        print "Getting Theme Ref"

    collection = rally.getCollection("https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/theme?")
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if(name == piName):
                    print pe.oid, pe.Name
                    return pe.oid

def getPortfolioItemFeatureRef(piName):
    global rally
 
    if debug:
        print "Getting Feature Ref"

    collection = rally.getCollection("https://rally1.rallydev.com/slm/webservice/v2.0/portfolioitem/feature?")
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if debug:
                    print pe.Name
                if(name == piName):
                    if debug:
                        print "Feature Found"
                    print pe.oid, pe.Name
                    return pe.oid

def getPreliminaryEstimateRef(object_value):
    global rally
    if debug:
        print "Getting Prelim Estiamte"

    collection = rally.getCollection("https://rally1.rallydev.com/slm/webservice/v2.0/preliminaryestimate?")
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if(name == object_value):
                    print pe.ref, pe.Name, pe.oid
                    return pe.ref

def getReleaseRef(object_value):
    global rally

    if debug:
        print "Getting Release Data"
    collection = rally.get('Release')
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if(name == object_value):
                    print pe.ref, pe.Name, pe.Project
                    return pe.ref

def getUserStoryRef(object_value):
    global rally
    debug = 1
    if debug:
        print "Getting User Story Data"
    print "Scope is : " + rally.getProject().Name
    args = {"projectScopeDown" : "True", "Project" : "Online Store"}
    collection = rally.get('UserStory', kwargs=args)
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if debug:
                    print pe.Name, pe.Project
                if(name == object_value):
                    print pe.ref, pe.Name, pe.Project
                    return pe.ref

def getTestFolderRef(object_value):
    global rally

    if debug:
        print "Getting User Story Data"
    collection = rally.get('TestFolder')
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if debug:
                    print pe.Name
                if(name == object_value):
                    print pe.ref, pe.Name, pe.Project
                    return pe.ref

def getTestCaseRef(object_value):
    global rally
    debug = 1
    if debug:
        print "Getting TestCase Data"
    collection = rally.getCollection('https://rally1.rallydev.com/slm/webservice/v2.0/testcase?')
    pprint(collection)
    assert collection.__class__.__name__ == 'RallyRESTResponse'
    if not collection.errors:
            for pe in collection:
                name = '%s' % pe.Name
                if debug:
                    print pe.Name
                if(name == object_value):
                    print pe.ref, pe.Name,
                    return pe.ref

def getUserStoryProjectRefByTask(object_value):
	print "searching... %s \n" % object_value
	query_str = "Name = " + object_value
	response = rally.search(object_value, fetch = True, projectScopeUp=True, projectScopeDown=True, project=getProjectRef("Online Store"))
    	assert response.__class__.__name__ == 'RallyRESTResponse'
	assert response.status_code == 200
   	assert response.errors   == []
    	assert response.warnings == []
    	assert response.resultCount > 0
    	print(response.resultCount)
    	for entry in response:
		if object_value == entry.Name:
	        	print(entry.ObjectID, entry.FormattedID, entry.Name, entry.Project)
			#return getProjectRef(entry.Project)

	print rally.getProject().ref
	print rally.getProject().Name

def myconverter(o):
    if isinstance(o, datetime.datetime):
	out = o.__str__()
	out =  out.replace(" ", "T")
        return out

def db(database_name='rally_data'):
    return psycopg2.connect("dbname=rally_data user=readonly password=readonly host=localhost")

def query_db(query, args=(), one=False):
    cur = db().cursor()
    cur.execute(query, args)
    r = [dict((cur.description[i][0], value) \
               for i, value in enumerate(row)) for row in cur.fetchall()]
    cur.connection.close()
    return (r[0] if r else None) if one else r

def getUserStoryRefByName(name):
	debug = 1
	if debug:
		print "debug mode userstoryrefbyname"
                print "searching for user story name %s" % name
	ref = story_ref[name] if story_ref.get(name) else False
	if ref == False:
		pprint(story_ref)
		sys.stderr.write("Error finding user story reference... something has gone wrong")
		sys.exit(1)
	if debug:
		print "found user story ref %s" % ref
	return ref

def getTestCaseRefByName(name):
        debug = 1
	if debug:
                print "debug mode test case refbyname"
                print "searching for user story name %s" % name
        ref = testcase_ref[name] if testcase_ref.get(name) else False
        if ref == False:
                pprint(testcase_ref)
                sys.stderr.write("Error finding test case reference... something has gone wrong")
                sys.exit(1)
        if debug:
                print "found test case ref"
        return ref

# When creating a task, the project needs to be filled in.  We get that from the user story.
def getProjectRefFromUserStoryName(name):
        debug = 1
	if debug:
                print "debug mode projectreffromstoryname"
		print "searching for user story name %s" % name
        ref = story_project_ref[name] if story_project_ref.get(name) else False
        if ref == False:  #Let's check the defect log before we error out
	       pprint(story_project_ref)
	       sys.stderr.write("Error finding project ref from user story reference... something has gone wrong")
	       sys.exit(1)
        if debug:
                print "found test case ref"
        return ref

"""
This determines which fields need to be translated due to being a reference value. 
If found, substitute the text with the real value
"""
def replace_values(val, object_type):
	debug = 1
	print "replace values for "
	print val
	print " item type: " + object_type
	if debug:
		print val

	if object_type == "Task":
		if debug:
			print "we need to get a project in the task object from the story object"
                val['project'] = getProjectRefFromUserStoryName(val['workproduct'])
		val['workproduct'] = getUserStoryRefByName(val['workproduct'])
		print "Workproduct %s project %s" % (val['workproduct'], val['project'])
	if val.get("testcase"):
		if debug:
			print "checking for testcase"
		val["testcase"] = getUserStoryRefByName(val["testcase"])
        if val.get("testfolder"):
                if debug:
                        print "checking for testfolder"
                val["testfolder"] = getTestFolderRef(val["testfolder"])

        if val.get("requirement"):
                if debug:
                        print "checking for requirement"
                val["requirement"] = getUserStoryRefByName(val["requirement"])
        if val.get("iteration"):
                if debug:
                        print "checking for iteration"
                val["iteration"] = getIterationRef(val["iteration"])
	if val.get("portfolioitem"):
		if debug:
			print "checking for parent on user story"
		if object_type == "Story":
			val["portfolioitem"] = getPortfolioItemFeatureRef(val["portfolioitem"])
        if val.get("release"):
                if debug:
                        print "checking for release"
                val["release"] = getReleaseRef(val["release"])
	if val.get("project") and (object_type != "Task"):
		if debug:
                        print "checking for project"
                val["project"] = getProjectRef(val["project"])
	if val.get("workproduct") and (object_type != "Task"):
		if debug:
                        print "checking for workproduct"
                val["workproduct"] = getUserStoryRefByName(val["workproduct"])  
	if val.get("owner"):
		if debug:
			print "getting user"
	 	val["owner"] = getUserRef(val["owner"])
        if val.get("preliminaryestimate"):
                if debug:
                        print "getting prelim estimate"
                val["preliminaryestimate"] = getPreliminaryEstimateRef(val["preliminaryestimate"])
	# this may be a problem... what if parent references a story?  Need to check
        if val.get("parent"):
                if debug:
                        print "getting parent for " + object_type + "\n"
		if object_type == "Initiative":
			val["parent"] = getPortfolioItemThemeRef(val["parent"])  #Something is going on here.  It's getting the first record, but not the second.
		if object_type == "Feature":
			val["parent"] = getPortfolioItemInitiativeRef(val["parent"]) # get parent to the feature, which is the initiative

                #val["parent"] = getPortfolioItemThemeRef(val["parent"])
        if val.get("state") :
                if debug:
                        print "getting state"
		if object_type == "Initiative":
			print "init state : %s" % rally.getState('Initiative', val["state"])
			val["state"] = rally.getState('Initiative', val["state"]).ref
		if object_type == "Feature":
                        print "feature state : %s" % rally.getState('Feature', val["state"])
			val["state"] = rally.getState('Feature', val["state"]).ref
                if object_type == "Theme":
                        print "theme state : %s" % rally.getState('Theme', val["state"])
                        val["state"] = rally.getState('Theme', val["state"]).ref


#clean out null values
def scrub(x):
    # Converts None to empty string
    ret = copy.deepcopy(x)
    # Handle dictionaries, lits & tuples. Scrub all values
    if isinstance(x, dict):
        for k, v in ret.items():
            ret[k] = scrub(v)
    if isinstance(x, (list, tuple)):
        for k, v in enumerate(ret):
            ret[k] = scrub(v)
    # Handle None
    if x is None:
        ret = ''
    # Finished scrubbing
    return ret

def remove_empty_keys(x):
	empty_keys = [k for k,v in x.iteritems() if not v]
	for k in empty_keys:
    		del x[k]


# Get Release Information
#iterate through list
#get projectref
#update json for dates?
# Get a list of items (releases)

objects = collections.OrderedDict()
objects = ["Release", "Iteration", "Theme", "Initiative", "Feature", "Story", "Defect", "TestFolder", "TestSet", "TestCase", "TestCaseStep", "TestCaseResult", "Task"]
#objects = ["Story", "Defect", "TestFolder", "TestSet", "TestCase", "TestCaseStep", "TestCaseResult", "Task"]
#objects = {"Release", "Initiave", "Theme"}
#objects = {"Story"}

for item_type in objects:
	item_text = "%s" % item_type
	query_text = "select * from " + item_text + ";"
	print query_text 
	my_query = query_db(query_text)
	#process each item.  We will have to do substitution for values that are references in the data, like projects and user names
	for item in my_query:
		item = scrub(item)
		# remove empty keys, as it causes a problem
		replace_values(item, item_text)
		remove_empty_keys(item)  #test... moving replace values above here instead of below.  Need to populate project on task from story.

		#replace_values(item, item_text)
		output = json.dumps(item, default = myconverter)
		output = json.loads(output)
		try:
			print "executing load"
			#print output
			print "creating object " + item_text + "\n\n"
			record = rally.create(item_text, output)
			pprint(record)
			debug = 1
			if (item_text == "Story") or (item_text == "Defect") or (item_text == "TestSet") or (item_text == "TestCase"):
				if debug:
					print "Debugging???"
					print "Name %s story ref %s Project %s " % (record.Name, record.ref, record.Project.ref)
				story_project_ref[record.Name] = record.Project.ref
				story_ref[record.Name] = record.ref
			# Build array of feature, themes and initiatives added to the workspace
			if(item_text == "Theme") or (item_text == "Initiative") or (item_text == "Feature"):
				if debug:
					print "adding to theme list"
					print "Name %s portfolio ref %s" % (record.Name, record.ref)
				portfolio_item_ref[record.Name] = record.ref
		except Exception, details:
			sys.stderr.write("error creating %s\n\n" % item_text)
			sys.stderr.write("ERROR: %s \n" % details)
			sys.exit(1)
		debug = 0
sys.exit(1)

